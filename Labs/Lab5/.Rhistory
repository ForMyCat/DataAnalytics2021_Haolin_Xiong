first_failed <- sample(x, 10000, prob = dexp(x, 1/610), replace = T)
second_failed <- sample(x, 10000, prob = dexp(x, 1/610), replace = T)
actual_failed <- c(10000)
actual_failed <- c()
actual_failed[1] <- 100
actual_failed[2] <- 100
actual_failed <- c()
actual_failed[2] <- 100
actual_failed <- c()
for (i in range(10000)) {
num1 <- first_failed[i]
num2 <- second_failed[i]
actual_failed[i] <- min(num1,num2)
}
min(num1,num2)
i
actual_failed[i]
View(actual_failed)
?append
actual_failed <- c()
for (i in range(10000)) {
num1 <- first_failed[i]
num2 <- second_failed[i]
actual_failed <- append(actual_failed,min(num1,num2))
}
?range
for (i in c(1,10000)) {
num1 <- first_failed[i]
num2 <- second_failed[i]
actual_failed <- append(actual_failed,min(num1,num2))
}
actual_failed <- c()
for (i in c(1,10000)) {
num1 <- first_failed[i]
num2 <- second_failed[i]
actual_failed <- append(actual_failed,min(num1,num2))
}
actual_failed <- c()
for (i in x) {
num1 <- first_failed[i]
num2 <- second_failed[i]
actual_failed <- append(actual_failed,min(num1,num2))
}
x <- seq(from = 1, to = 10000, by = 1)
actual_failed <- c()
for (i in x) {
num1 <- first_failed[i]
num2 <- second_failed[i]
actual_failed <- append(actual_failed,min(num1,num2))
}
RIN <- 610
trial <- function(){
actual_failed <- c()
first_failed <- sample(x, 10000, prob = dexp(x, 1/RIN), replace = T)
second_failed <- sample(x, 10000, prob = dexp(x, 1/RIN), replace = T)
for (i in x) {
num1 <- first_failed[i]
num2 <- second_failed[i]
actual_failed <- append(actual_failed,min(num1,num2))
}
}
x <- seq(from = 1, to = 10000, by = 1)
plot(x, dexp(x, 1/610), type = "l",ylab = "", lwd = 2, col = "red")
plot(x, pexp(x, 1/610), type = "l",ylab = "", lwd = 2, col = "red")
x <- seq(from = 1, to = 10000, by = 1)
plot(x, pexp(x, 1/610), type = "l",ylab = "", lwd = 2, col = "red")
RIN <- 610
actual_failed <- c()
first_failed <- sample(x, 10000, prob = pexp(x, 1/RIN), replace = T)
second_failed <- sample(x, 10000, prob = pexp(x, 1/RIN), replace = T)
for (i in x) {
num1 <- first_failed[i]
num2 <- second_failed[i]
actual_failed <- append(actual_failed,min(num1,num2))
}
# ISLR: Introduction to Statistical Learning with R (textbook that we use in this class)
# Validation set example with Auto dataset.
library(ISLR)
library(MASS)
library(boot)
set.seed(1)
# Read the cv.glm documentation
??cv.glm
# read the documentation for sample() function
help("sample")
train = sample(392,196)
# We use the subset option in the lm() function to fit a linear regression using,
# only the observations corresponding to the training set.
lm.fit <- lm(mpg~horsepower, data = Auto, subset = train)
# Now we use predict() function to estimate the response for all 392 observations,
# and we use the mean() function to calculate the MSE of the 196 observations in the
# validation set. Note that the -train selects only the observations that are not in,
# the training set.
attach(Auto)
mean((mpg-predict(lm.fit,Auto))[-train]^2)
# Therefore, the estimated test MSE for the linear regression fit is 26.14
# We can use the poly() function to estimate test error for the quadratic and cubic regression.
# Quadratic regression line
lm.fit2 <- lm(mpg~poly(horsepower,2), data = Auto, subset = train) # Quadratic
mean((mpg-predict(lm.fit2,Auto))[-train]^2)
# Cubic regression line
lm.fit3 <- lm(mpg~poly(horsepower,3), data = Auto, subset = train) # Cubic
mean((mpg-predict(lm.fit3,Auto))[-train]^2)
# The error rates are: 19.82 for quadratics and 19.78 for cubic
# If we choose different training set instead, then we will obtain somewhat different errors,
# on the validation set.
set.seed(2)
train = sample(392,196)
lm.fit <- lm(mpg~horsepower, data = Auto, subset = train)
mean((mpg-predict(lm.fit,Auto))[-train]^2)
# the error rate is 23.29
lm.fit2 <- lm(mpg~poly(horsepower,2), data = Auto, subset = train) # Quadratic
mean((mpg-predict(lm.fit2,Auto))[-train]^2)
# the error rate is 18.90
lm.fit3 <- lm(mpg~poly(horsepower,3), data = Auto, subset = train) # Cubic
mean((mpg-predict(lm.fit3,Auto))[-train]^2)
# the error rate is 19.25
# Using this split of the observations into a training set and validation set,
# we find that the validation set error rates for the models with linear, quadratic,
# and cubic terms are 23.29, 18.90 and 19.25 respectively.
# The model that predict mpg using a quadratic function of horsepower performs better,
# than a models that only involves only a linear function of horsepower, and there is a,
# little evidence in favor of a model that uses a cubic function of horsepower.
install.packages("ISLR")
install.packages("MASS")
install.packages("boot")
install.packages("MASS")
# ISLR: Introduction to Statistical Learning with R (textbook that we use in this class)
# Validation set example with Auto dataset.
library(ISLR)
library(MASS)
library(boot)
set.seed(1)
# Read the cv.glm documentation
??cv.glm
# read the documentation for sample() function
help("sample")
train = sample(392,196)
# We use the subset option in the lm() function to fit a linear regression using,
# only the observations corresponding to the training set.
lm.fit <- lm(mpg~horsepower, data = Auto, subset = train)
# Now we use predict() function to estimate the response for all 392 observations,
# and we use the mean() function to calculate the MSE of the 196 observations in the
# validation set. Note that the -train selects only the observations that are not in,
# the training set.
attach(Auto)
mean((mpg-predict(lm.fit,Auto))[-train]^2)
# Therefore, the estimated test MSE for the linear regression fit is 26.14
# We can use the poly() function to estimate test error for the quadratic and cubic regression.
# Quadratic regression line
lm.fit2 <- lm(mpg~poly(horsepower,2), data = Auto, subset = train) # Quadratic
mean((mpg-predict(lm.fit2,Auto))[-train]^2)
# Cubic regression line
lm.fit3 <- lm(mpg~poly(horsepower,3), data = Auto, subset = train) # Cubic
mean((mpg-predict(lm.fit3,Auto))[-train]^2)
# The error rates are: 19.82 for quadratics and 19.78 for cubic
# If we choose different training set instead, then we will obtain somewhat different errors,
# on the validation set.
set.seed(2)
train = sample(392,196)
lm.fit <- lm(mpg~horsepower, data = Auto, subset = train)
mean((mpg-predict(lm.fit,Auto))[-train]^2)
# the error rate is 23.29
lm.fit2 <- lm(mpg~poly(horsepower,2), data = Auto, subset = train) # Quadratic
mean((mpg-predict(lm.fit2,Auto))[-train]^2)
# the error rate is 18.90
lm.fit3 <- lm(mpg~poly(horsepower,3), data = Auto, subset = train) # Cubic
mean((mpg-predict(lm.fit3,Auto))[-train]^2)
# the error rate is 19.25
# Using this split of the observations into a training set and validation set,
# we find that the validation set error rates for the models with linear, quadratic,
# and cubic terms are 23.29, 18.90 and 19.25 respectively.
# The model that predict mpg using a quadratic function of horsepower performs better,
# than a models that only involves only a linear function of horsepower, and there is a,
# little evidence in favor of a model that uses a cubic function of horsepower.
??cv.glm
set.seed(17)
help("rep") # read the documentation for the rep() function in R.
cv.error.10 = rep(0,10) # read documentation, help("rep")
for(i in 1:10){
glm.fit = glm(mpg ~ poly(horsepower, i), data = Auto)
cv.error.10[i] = cv.glm(Auto,glm.fit, K=10) $delta[1]
}
cv.error.10
# Notice the computation time is much shorter than LOOCV! :),
# This depends on your laptop performance :)
# We still see little evidence that using cubic or higher-order polynomials terms,
# leads to lower test error than simply using a quadratics fit.
?"sample"
library(ISLR)
library(MASS)
library(boot)
set.seed(1)
??cv.glm
?"sample"
train = sample(392,196)
lm.fit <- lm(mpg~horsepower, data = Auto, subset = train)
attach(Auto)
mean((mpg-predict(lm.fit,Auto))[-train]^2)
lm.fit2 <- lm(mpg~poly(horsepower,2), data = Auto, subset = train) # Quadratic
mean((mpg-predict(lm.fit2,Auto))[-train]^2)
lm.fit3 <- lm(mpg~poly(horsepower,3), data = Auto, subset = train) # Cubic
mean((mpg-predict(lm.fit3,Auto))[-train]^2)
set.seed(2)
train = sample(392,196)
lm.fit <- lm(mpg~horsepower, data = Auto, subset = train)
mean((mpg-predict(lm.fit,Auto))[-train]^2)
lm.fit2 <- lm(mpg~poly(horsepower,2), data = Auto, subset = train) # Quadratic
mean((mpg-predict(lm.fit2,Auto))[-train]^2)
lm.fit3 <- lm(mpg~poly(horsepower,3), data = Auto, subset = train) # Cubic
mean((mpg-predict(lm.fit3,Auto))[-train]^2)
# ------------------K - Fold ----------------------
??cv.glm
set.seed(17)
help("rep")
cv.error.10 = rep(0,10)
for(i in 1:10){
glm.fit = glm(mpg ~ poly(horsepower, i), data = Auto)
cv.error.10[i] = cv.glm(Auto,glm.fit, K=10) $delta[1]
}
cv.error.10
library(gdata)
#faster xls reader but requires perl!
bronx1<-read.xls(file.choose(),pattern="BOROUGH",stringsAsFactors=FALSE,sheet=1,perl="<SOMEWHERE>/perl/bin/perl.exe")
bronx1<-bronx1[which(bronx1$GROSS.SQUARE.FEET!="0" & bronx1$LAND.SQUARE.FEET!="0" & bronx1$SALE.PRICE!="$0"),]
#alternate
#library("xlsx", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
#bronx1<-read.xlsx("<SOMEWHERE>/rollingsales_bronx.xls",pattern="BOROUGH",stringsAsFactors=FALSE,sheetIndex=1,startRow=5,header=TRUE)
View(bronx1)
#
attach(bronx1) # If you choose to attach, leave out the "data=." in lm regression
SALE.PRICE<-sub("\\$","",SALE.PRICE)
SALE.PRICE<-as.numeric(gsub(",","", SALE.PRICE))
GROSS.SQUARE.FEET<-as.numeric(gsub(",","", GROSS.SQUARE.FEET))
LAND.SQUARE.FEET<-as.numeric(gsub(",","", LAND.SQUARE.FEET))
plot(log(GROSS.SQUARE.FEET), log(SALE.PRICE))
m1<-lm(log(SALE.PRICE)~log(GROSS.SQUARE.FEET))
summary(m1)
abline(m1,col="red",lwd=2)
plot(resid(m1))
# Model 2
m2<-lm(log(bronx1$SALE.PRICE)~log(bronx1$GROSS.SQUARE.FEET)+log(bronx1$LAND.SQUARE.FEET)+factor(bronx1$NEIGHBORHOOD))
summary(m2)
plot(resid(m2))
# Suppress intercept - using "0+ ..."
m2a<-lm(log(bronx1$SALE.PRICE)~0+log(bronx1$GROSS.SQUARE.FEET)+log(bronx1$LAND.SQUARE.FEET)+factor(bronx1$NEIGHBORHOOD))
summary(m2a)
plot(resid(m2a))
# Model 3
m3<-lm(log(bronx1$SALE.PRICE)~0+log(bronx1$GROSS.SQUARE.FEET)+log(bronx1$LAND.SQUARE.FEET)+factor(bronx1$NEIGHBORHOOD)+factor(bronx1$BUILDING.CLASS.CATEGORY))
summary(m3)
plot(resid(m3))
# Model 4
m4<-lm(log(bronx1$SALE.PRICE)~0+log(bronx1$GROSS.SQUARE.FEET)+log(bronx1$LAND.SQUARE.FEET)+factor(bronx1$NEIGHBORHOOD)*factor(bronx1$BUILDING.CLASS.CATEGORY))
summary(m4)
plot(resid(m4))
#
library(gdata)
#faster xls reader but requires perl!
bronx1<-read.xls(file.choose(),pattern="BOROUGH",stringsAsFactors=FALSE,sheet=1,perl="<SOMEWHERE>/perl/bin/perl.exe")
library(gdata)
#faster xls reader but requires perl!
bronx1<-read.xls(file.choose(),pattern="BOROUGH",stringsAsFactors=FALSE,sheet=1,perl="<SOMEWHERE>/perl/bin/perl.exe")
bronx1<-bronx1[which(bronx1$GROSS.SQUARE.FEET!="0" & bronx1$LAND.SQUARE.FEET!="0" & bronx1$SALE.PRICE!="$0"),]
#alternate
#library("xlsx", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
#bronx1<-read.xlsx("<SOMEWHERE>/rollingsales_bronx.xls",pattern="BOROUGH",stringsAsFactors=FALSE,sheetIndex=1,startRow=5,header=TRUE)
View(bronx1)
#
attach(bronx1) # If you choose to attach, leave out the "data=." in lm regression
SALE.PRICE<-sub("\\$","",SALE.PRICE)
SALE.PRICE<-as.numeric(gsub(",","", SALE.PRICE))
GROSS.SQUARE.FEET<-as.numeric(gsub(",","", GROSS.SQUARE.FEET))
LAND.SQUARE.FEET<-as.numeric(gsub(",","", LAND.SQUARE.FEET))
plot(log(GROSS.SQUARE.FEET), log(SALE.PRICE))
m1<-lm(log(SALE.PRICE)~log(GROSS.SQUARE.FEET))
summary(m1)
abline(m1,col="red",lwd=2)
plot(resid(m1))
# Model 2
m2<-lm(log(bronx1$SALE.PRICE)~log(bronx1$GROSS.SQUARE.FEET)+log(bronx1$LAND.SQUARE.FEET)+factor(bronx1$NEIGHBORHOOD))
summary(m2)
plot(resid(m2))
# Suppress intercept - using "0+ ..."
m2a<-lm(log(bronx1$SALE.PRICE)~0+log(bronx1$GROSS.SQUARE.FEET)+log(bronx1$LAND.SQUARE.FEET)+factor(bronx1$NEIGHBORHOOD))
summary(m2a)
plot(resid(m2a))
# Model 3
m3<-lm(log(bronx1$SALE.PRICE)~0+log(bronx1$GROSS.SQUARE.FEET)+log(bronx1$LAND.SQUARE.FEET)+factor(bronx1$NEIGHBORHOOD)+factor(bronx1$BUILDING.CLASS.CATEGORY))
summary(m3)
plot(resid(m3))
# Model 4
m4<-lm(log(bronx1$SALE.PRICE)~0+log(bronx1$GROSS.SQUARE.FEET)+log(bronx1$LAND.SQUARE.FEET)+factor(bronx1$NEIGHBORHOOD)*factor(bronx1$BUILDING.CLASS.CATEGORY))
summary(m4)
plot(resid(m4))
#
#faster xls reader but requires perl!
bronx1<-read.xlsx(file.choose(),pattern="BOROUGH",stringsAsFactors=FALSE,sheet=1,perl="<SOMEWHERE>/perl/bin/perl.exe")
#faster xls reader but requires perl!
bronx1<-read_excel(file.choose(),pattern="BOROUGH",stringsAsFactors=FALSE,sheet=1,perl="<SOMEWHERE>/perl/bin/perl.exe")
bronx1<-read.xlsx("D:\GitHub\DataAnalytics2021_Haolin_Xiong\Labs\Lab5/rollingsales_bronx.xls",pattern="BOROUGH",stringsAsFactors=FALSE,sheetIndex=1,startRow=5,header=TRUE)
bronx1<-read.xlsx("D:/GitHub/DataAnalytics2021_Haolin_Xiong/Labs/Lab5/rollingsales_bronx.xls",pattern="BOROUGH",stringsAsFactors=FALSE,sheetIndex=1,startRow=5,header=TRUE)
#alternate
library("xlsx", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
bronx1<-read.xls("D:/GitHub/DataAnalytics2021_Haolin_Xiong/Labs/Lab5/rollingsales_bronx.xls",pattern="BOROUGH",stringsAsFactors=FALSE,sheetIndex=1,startRow=5,header=TRUE)
x
bronx1<-read.xlsx("D:/GitHub/DataAnalytics2021_Haolin_Xiong/Labs/Lab5/rollingsales_bronx.xls",pattern="BOROUGH",stringsAsFactors=FALSE,sheetIndex=1,startRow=5,header=TRUE)
#alternate
library("xlsx", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
#alternate
library("xlsx")
#alternate
library(xlsx)
bronx1<-read.xlsx("D:/GitHub/DataAnalytics2021_Haolin_Xiong/Labs/Lab5/rollingsales_bronx.xls",pattern="BOROUGH",stringsAsFactors=FALSE,sheetIndex=1,startRow=5,header=TRUE)
bronx1<-read.xlss("D:/GitHub/DataAnalytics2021_Haolin_Xiong/Labs/Lab5/rollingsales_bronx.xls",pattern="BOROUGH",stringsAsFactors=FALSE,sheetIndex=1,startRow=5,header=TRUE)
bronx1<-read.xls("D:/GitHub/DataAnalytics2021_Haolin_Xiong/Labs/Lab5/rollingsales_bronx.xls",pattern="BOROUGH",stringsAsFactors=FALSE,sheetIndex=1,startRow=5,header=TRUE)
#alternate
library(readxl)
bronx1<-read_excel("D:/GitHub/DataAnalytics2021_Haolin_Xiong/Labs/Lab5/rollingsales_bronx.xls",header=TRUE)
bronx1<-read_excel("D:/GitHub/DataAnalytics2021_Haolin_Xiong/Labs/Lab5/rollingsales_bronx.xls")
View(bronx1)
bronx1<-read_excel("D:/GitHub/DataAnalytics2021_Haolin_Xiong/Labs/Lab5/rollingsales_bronx.xls",pattern="BOROUGH")
bronx1<-read.xls("D:/GitHub/DataAnalytics2021_Haolin_Xiong/Labs/Lab5/rollingsales_bronx.xls",pattern="BOROUGH")
bronx1<-read.xls(file.choose(),pattern="BOROUGH")
function (new = FALSE)
View(bronx1)
bronx1<-read.xls(file.choose(),pattern="BOROUGH")
setwd("D:/GitHub/DataAnalytics2021_Haolin_Xiong/Labs/Lab5")
bronx1<-read.xls('rollingsales_bronx.xls',pattern="BOROUGH")
bronx1<-read.xls('https://aquarius.tw.rpi.edu/html/DA/NYhousing/rollingsales_bronx.xls',pattern="BOROUGH")
library(gdata)
#alternate
bronx1<-read.xls('https://aquarius.tw.rpi.edu/html/DA/NYhousing/rollingsales_bronx.xls',pattern="BOROUGH")
#alternate
bronx1<-read.xls('https://aquarius.tw.rpi.edu/html/DA/NYhousing/rollingsales_bronx.xls',pattern="BOROUGH")
library(gdata)
install.packages("gdata")
library(gdata)
#alternate
bronx1<-read.xls('https://aquarius.tw.rpi.edu/html/DA/NYhousing/rollingsales_bronx.xls',pattern="BOROUGH")
library(gdata)
install.packages("gdata")
library(gdata)
library(gtools)
library(gdata)
library(gtools)
library(gdata)
#alternate
bronx1<-read.xls('https://aquarius.tw.rpi.edu/html/DA/NYhousing/rollingsales_bronx.xls',pattern="BOROUGH")
library(gtools)
#alternate
bronx1<-read.xls('https://aquarius.tw.rpi.edu/html/DA/NYhousing/rollingsales_bronx.xls',pattern="BOROUGH")
#alternate
bronx1<-read_excel('https://aquarius.tw.rpi.edu/html/DA/NYhousing/rollingsales_bronx.xls',pattern="BOROUGH")
library(readxl)
#alternate
bronx1<-read_excel('https://aquarius.tw.rpi.edu/html/DA/NYhousing/rollingsales_bronx.xls',pattern="BOROUGH")
#alternate
bronx1<-read_excel('https://aquarius.tw.rpi.edu/html/DA/NYhousing/rollingsales_bronx.xls')
#alternate
bronx1<-read_excel('https://aquarius.tw.rpi.edu/html/DA/NYhousing/rollingsales_bronx.xls')
#alternate
bronx1<-read_excel('rollingsales_bronx.xls')
?read_excel
#alternate
bronx1<-read_excel('rollingsales_bronx.xls',skip=4)
View(bronx1)
bronx1<-bronx1[which(bronx1$GROSS.SQUARE.FEET!="0" & bronx1$LAND.SQUARE.FEET!="0" & bronx1$SALE.PRICE!="$0"),]
#alternate
bronx1<-read_excel('rollingsales_bronx.xls',skip=4)
View(bronx1)
#alternate
bronx1<-read_excel('rollingsales_bronx.xls',skip=4，header=TRUE)
#alternate
bronx1<-read_excel('rollingsales_bronx.xls',skip=4,header=TRUE)
source("D:/GitHub/DataAnalytics2021_Haolin_Xiong/Labs/Lab5/lab1_bronx1.R")
#alternate
bronx1<-read_excel('rollingsales_bronx.xls',skip=4)
?read_excel
#alternate
bronx1<-read_excel('rollingsales_bronx.xls',skip=4,col_names = TRUE)
View(bronx1)
(bronx1)['GROSS SQUARE FEET']
gsub(" ", "\\\\\\\\", "a b")
names <- names((bronx1))
names <- names((bronx1))
names
new_names <- lapply(names,gsub(" ", ".", ))
source("D:/GitHub/DataAnalytics2021_Haolin_Xiong/Labs/Lab5/lab1_bronx1.R")
source("D:/GitHub/DataAnalytics2021_Haolin_Xiong/Labs/Lab5/lab1_bronx1.R")
source("D:/GitHub/DataAnalytics2021_Haolin_Xiong/Labs/Lab5/lab1_bronx1.R")
source("D:/GitHub/DataAnalytics2021_Haolin_Xiong/Labs/Lab5/lab1_bronx1.R")
fun <- function(x) {
names.gsub(" ", "." , x)
}
new_names <- lapply(names,fun)
source("D:/GitHub/DataAnalytics2021_Haolin_Xiong/Labs/Lab5/lab1_bronx1.R")
fun <- function(x) {
gsub(" ", "." , x)
}
new_names <- lapply(names,fun)
View(bronx1)
names(bronx1)[names(bronx1) == 'GROSS SQUARE FEET'] <- 'GROSS.SQUARE.FEET'
new_names
gsub("\n", "." , x)
fun <- function(x) {
gsub(" ", "." , x)
gsub("\n", "." , x)
}
names <- names((bronx1))
new_names <- lapply(names,fun)
new_names
fun <- function(x) {
gsub(" ", "." , x)
}
names <- names((bronx1))
new_names <- lapply(names,fun)
new_names
names(bronx1) <- new_names
bronx1<-bronx1[which(bronx1$GROSS.SQUARE.FEET!="0" & bronx1$LAND.SQUARE.FEET!="0" & bronx1$SALE.PRICE!="$0"),]
names(bronx1)[names(bronx1) == 'SALE\nPRICE'] <- 'SALE.PRICE'
bronx1<-bronx1[which(bronx1$GROSS.SQUARE.FEET!="0" & bronx1$LAND.SQUARE.FEET!="0" & bronx1$SALE.PRICE!="$0"),]
View(bronx1)
source("D:/GitHub/DataAnalytics2021_Haolin_Xiong/Labs/Lab5/lab1_bronx1.R")
#alternate
bronx1<-read_excel('rollingsales_bronx.xls',skip=4,col_names = TRUE)
names <- names((bronx1))
fun <- function(x) {
gsub(" ", "." , x)
}
new_names <- lapply(names,fun)
new_names
names(bronx1) <- new_names
names(bronx1)[names(bronx1) == 'SALE\nPRICE'] <- 'SALE.PRICE'
bronx1<-bronx1[which(bronx1$GROSS.SQUARE.FEET!="0" & bronx1$LAND.SQUARE.FEET!="0" & bronx1$SALE.PRICE!="$0"),]
View(bronx1)
source("D:/GitHub/DataAnalytics2021_Haolin_Xiong/Labs/Lab5/lab1_bronx1.R")
#
attach(bronx1) # If you choose to attach, leave out the "data=." in lm regression
SALE.PRICE<-sub("\\$","",SALE.PRICE)
SALE.PRICE<-as.numeric(gsub(",","", SALE.PRICE))
GROSS.SQUARE.FEET<-as.numeric(gsub(",","", GROSS.SQUARE.FEET))
LAND.SQUARE.FEET<-as.numeric(gsub(",","", LAND.SQUARE.FEET))
plot(log(GROSS.SQUARE.FEET), log(SALE.PRICE))
m1<-lm(log(SALE.PRICE)~log(GROSS.SQUARE.FEET))
View(bronx1)
bronx1<-bronx1[which(bronx1$GROSS.SQUARE.FEET!="0" & bronx1$LAND.SQUARE.FEET!="0" & bronx1$SALE.PRICE!="$0"),]
View(bronx1)
#alternate
bronx1<-read_excel('rollingsales_bronx.xls',skip=4,col_names = TRUE)
names <- names((bronx1))
fun <- function(x) {
gsub(" ", "." , x)
}
new_names <- lapply(names,fun)
new_names
names(bronx1) <- new_names
names(bronx1)[names(bronx1) == 'SALE\nPRICE'] <- 'SALE.PRICE'
bronx1<-bronx1[which(bronx1$GROSS.SQUARE.FEET!="0" & bronx1$LAND.SQUARE.FEET!="0" & bronx1$SALE.PRICE!="$0"),]
View(bronx1)
source("D:/GitHub/DataAnalytics2021_Haolin_Xiong/Labs/Lab5/lab1_bronx1.R")
bronx1<-bronx1[which(bronx1$GROSS.SQUARE.FEET!="0" & bronx1$LAND.SQUARE.FEET!="0" & bronx1$SALE.PRICE!="0"),]
View(bronx1)
#
attach(bronx1) # If you choose to attach, leave out the "data=." in lm regression
SALE.PRICE<-sub("\\$","",SALE.PRICE)
SALE.PRICE<-as.numeric(gsub(",","", SALE.PRICE))
GROSS.SQUARE.FEET<-as.numeric(gsub(",","", GROSS.SQUARE.FEET))
LAND.SQUARE.FEET<-as.numeric(gsub(",","", LAND.SQUARE.FEET))
plot(log(GROSS.SQUARE.FEET), log(SALE.PRICE))
m1<-lm(log(SALE.PRICE)~log(GROSS.SQUARE.FEET))
View(bronx1)
m1<-lm(log(SALE.PRICE)~log(GROSS.SQUARE.FEET))
source("D:/GitHub/DataAnalytics2021_Haolin_Xiong/Labs/Lab5/lab1_bronx1.R")
source("D:/GitHub/DataAnalytics2021_Haolin_Xiong/Labs/Lab5/lab1_bronx1.R")
bronx1<-bronx1[which(bronx1$GROSS.SQUARE.FEET!="0" & bronx1$LAND.SQUARE.FEET!="0" & bronx1$SALE.PRICE!="0"& bronx1$LAND.SQUARE.FEET!="0" & bronx1$SALE.PRICE!="1"),]
m1<-lm(log(SALE.PRICE)~log(GROSS.SQUARE.FEET))
SALE.PRICE<-sub("\\$","",SALE.PRICE)
SALE.PRICE<-as.numeric(gsub(",","", SALE.PRICE))
GROSS.SQUARE.FEET<-as.numeric(gsub(",","", GROSS.SQUARE.FEET))
LAND.SQUARE.FEET<-as.numeric(gsub(",","", LAND.SQUARE.FEET))
plot(log(GROSS.SQUARE.FEET), log(SALE.PRICE))
m1<-lm(log(SALE.PRICE)~log(GROSS.SQUARE.FEET))
source("D:/GitHub/DataAnalytics2021_Haolin_Xiong/Labs/Lab5/lab1_bronx1.R")
#
attach(bronx1) # If you choose to attach, leave out the "data=." in lm regression
#
#attach(bronx1) # If you choose to attach, leave out the "data=." in lm regression
bronx1$SALE.PRICE<-sub("\\$","",bronx1$SALE.PRICE)
bronx1$SALE.PRICE<-as.numeric(gsub(",","", bronx1$SALE.PRICE))
bronx1$GROSS.SQUARE.FEET<-as.numeric(gsub(",","", bronx1$GROSS.SQUARE.FEET))
bronx1$LAND.SQUARE.FEET<-as.numeric(gsub(",","", bronx1$LAND.SQUARE.FEET))
plot(log(bronx1$GROSS.SQUARE.FEET), log(bronx1$SALE.PRICE))
m1<-lm(log(SALE.PRICE)~log(GROSS.SQUARE.FEET),data = bronx1)
summary(m1)
abline(m1,col="red",lwd=2)
plot(resid(m1))
m2<-lm(log(bronx1$SALE.PRICE)~log(bronx1$GROSS.SQUARE.FEET)+log(bronx1$LAND.SQUARE.FEET)+factor(bronx1$NEIGHBORHOOD))
summary(m2)
plot(resid(m2))
# Suppress intercept - using "0+ ..."
m2a<-lm(log(bronx1$SALE.PRICE)~0+log(bronx1$GROSS.SQUARE.FEET)+log(bronx1$LAND.SQUARE.FEET)+factor(bronx1$NEIGHBORHOOD))
summary(m2a)
plot(resid(m2a))
# Model 3
m3<-lm(log(bronx1$SALE.PRICE)~0+log(bronx1$GROSS.SQUARE.FEET)+log(bronx1$LAND.SQUARE.FEET)+factor(bronx1$NEIGHBORHOOD)+factor(bronx1$BUILDING.CLASS.CATEGORY))
summary(m3)
plot(resid(m3))
# Model 4
m4<-lm(log(bronx1$SALE.PRICE)~0+log(bronx1$GROSS.SQUARE.FEET)+log(bronx1$LAND.SQUARE.FEET)+factor(bronx1$NEIGHBORHOOD)*factor(bronx1$BUILDING.CLASS.CATEGORY))
summary(m4)
plot(resid(m4))
