border="black",
density=c(10,20) , angle=c(45,135)
)
bank_Data$age_bracket <- ifelse(bank_Data$age_bracket == 1, 'Young', ifelse(bank_Data$age_bracket == 2, 'Medium','Old'))
##Reduce the dimension of some categorical values
catVars <- select_if(bank_Data, is.character)
names(catVars)
#Break down job into 5 brackets
unique(bank_Data$job)
no_income <- c('unemployed','student')
low_income <- c('housemaid','blue-collar','services')
mid_income <- c('technician','admin.','self-employed')
high_income <- c('management','entrepreneur')
other_income <- c('retired','unknown')
break_income <- function(x){
if(x %in% no_income){return('no_income')}
else if(x %in% low_income){return('low_income')}
else if(x %in% mid_income){return('mid_income')}
else if(x %in% high_income){return('high_income')}
else {return('other_income')}
}
bank_Data$job_bracket <- lapply(bank_Data$job,break_income)
bank_Data$job_bracket <- unlist(bank_Data$job_bracket)
typeof(bank_Data$job_bracket)
#Break down education into brackets
unique(bank_Data$education)
low_edu <- c("basic.4y" ,"basic.6y" ,"illiterate" )
mid_edu <- c("high.school","basic.9y")
high_edu <- c("university.degree","professional.course")
break_edu <- function(x){
if(x %in% low_edu){return('low_edu')}
else if(x %in% low_income){return('low_income')}
else if(x %in% mid_edu){return('mid_edu')}
else if(x %in% high_edu){return('high_edu')}
else {return('unknown')}
}
bank_Data$edu_bracket <- lapply(bank_Data$education,break_edu)
bank_Data$edu_bracket <- unlist(bank_Data$edu_bracket)
typeof(bank_Data$edu_bracket)
##Select all the features
catVars <- select_if(bank_Data, is.character)
names(catVars)
numVars <- select_if(bank_Data, is.numeric)
numVars <- names(numVars)[!names(numVars) %in% c('age','duration','pdays')]
numVars
training_feature <- c(c("job_bracket","marital","default","housing","loan","contact",
"month","day_of_week","poutcome","age_bracket","edu_bracket",'y'),numVars)
training_feature
#Convert y label in to boolean
bank_Data$y <- ifelse(bank_Data$y == 'yes',1,0)
bank_Data$y <- as.factor(bank_Data$y)
unique(bank_Data$y)
#7:3 train test split
n = nrow(bank_Data)
trainIndex = sample(1:n, size = round(0.7*n), replace=FALSE)
training_data = bank_Data[trainIndex,training_feature]
testing_data = bank_Data[-trainIndex,training_feature]
unique(bank_Data$y)
unique(bank_Data$y)
##---------------------Models---------------------------------
#Logistic Regression
logit_model <- glm(y ~ ., data = training_data)
unique(bank_Data$y)
##---------------------Models---------------------------------
#Logistic Regression
logit_model <- glm(y ~ ., data = training_data,family=binomial(link='logit'))
summary(logit_model)
logit_pred <- predict(logit_model,testing_data)
logit_pred <- model %>% predict(testing_data, type = "response")
logit_pred <- logit_model %>% predict(testing_data, type = "response")
logit_pred <- ifelse(logit_pred > 0.5, 1, 0)
# Model accuracy
mean(logit_pred == testing_data$y)
summary(logit_model)
##---------------------Models---------------------------------
#Logistic Regression
logit_model <- glm(y ~ 0+., data = training_data,family=binomial(link='logit'))
summary(logit_model)
unique(bank_Data$loan)
selected_features <-
training_feature[!training_feature %in% c('euribor3m','nr.employed','previous',
'marital','loan')]
training_data = bank_Data[trainIndex,selected_features]
testing_data = bank_Data[-trainIndex,selected_features]
forest_out <- randomForest(y ~., data= training_data,ntree=100,replace=TRUE)
#Random Forest
library(randomForest)
forest_out <- randomForest(y ~., data= training_data,ntree=100,replace=TRUE)
print(forest_out)
rf_pred <- forest_out %>% predict(testing_data, type = "response")
rf_pred
rf_acc <- mean(ifelse(rf_pred == testing_data$y,1,0))
rf_acc
varImpPlot(forest_out)
plot(forest_out, log="y")
plot(forest_out)
, log="y"
plot(forest_out, log="y")
forest_out <- randomForest(y ~., data= training_data,ntree=100,replace=TRUE,importance=TRUE)
print(forest_out)
rf_pred <- forest_out %>% predict(testing_data, type = "response")
rf_pred
varImpPlot(forest_out)
varImpPlot(forest_out)
forest_out <- randomForest(y ~., data= training_data,ntree=100,replace=TRUE)
print(forest_out)
rf_pred <- forest_out %>% predict(testing_data, type = "response")
rf_pred
varImpPlot(forest_out)
getTree(forest_out, 3, labelVar=TRUE)
rpart.plot(getTree(forest_out, 3, labelVar=TRUE))
library(rpart)
rpart.plot(getTree(forest_out, 3, labelVar=TRUE))
library(rpart)
library(rpart.plot)
install.packages('rpart.plot')
rpart.plot(getTree(forest_out, 3, labelVar=TRUE))
library(rpart.plot)
rpart.plot(getTree(forest_out, 3, labelVar=TRUE))
?getTree
rpart.object(getTree(forest_out, 3, labelVar=TRUE))
library(rpart.object)
install.packages('rpart.object')
rpart.object(getTree(forest_out, 3, labelVar=TRUE))
library(rpart.object)
getRpartModel(getTree(forest_out, 3, labelVar=TRUE), training_data)
ctree_out <- ctree(y ~., data= training_data,replace=TRUE)
library(tree)
install.packages('tree')
library(tree)
ctree_out <- ctree(y ~., data= training_data,replace=TRUE)
library(tree)
require(party)
install.packages('party')
library(tree)
require(party)
ctree_out <- ctree(y ~., data= training_data,replace=TRUE)
ctree_out <- tree(y ~., data= training_data,replace=TRUE)
dtree_out <- rpart(y ~., data= training_data,replace=TRUE)
library(rpart)
#Decision Tree- Demonstration purposes
dtree_out <- rpart(y ~., data= training_data,method = "class")
rpart.plot(dtree_out)
training_data
?rpart
dtree_out
?rpart
#Decision Tree- Demonstration purposes
dtree_out <- rpart(y ~., data= training_data)
rpart.plot(dtree_out)
?rpart.plot
rpart.plot(dtree_out,type=5)
#Decision Tree- Demonstration purposes
dtree_out <- rpart(y ~., data= training_data,control=rpart.control(minsplit=2, minbucket=1, cp=0.001))
dtree_out
rpart.plot(dtree_out,type=5)
#Decision Tree- Demonstration purposes
dtree_out <- rpart(y ~., data= training_data,control=rpart.control(minsplit=2, minbucket=1, cp=0.01))
dtree_out
rpart.plot(dtree_out,type=5)
#Decision Tree- Demonstration purposes
dtree_out <- rpart(y ~., data= training_data,control=rpart.control(minsplit=2, minbucket=1, cp=0.001))
dtree_out
rpart.plot(dtree_out,type=5)
#Decision Tree- Demonstration purposes
dtree_out <- rpart(y ~., data= training_data,control=rpart.control(minsplit=2, minbucket=1, cp=0.01))
dtree_out
rpart.plot(dtree_out,type=5)
#Decision Tree- Demonstration purposes
dtree_out <- rpart(y ~., data= training_data,control=rpart.control(minsplit=5, minbucket=1, cp=0.01))
dtree_out
rpart.plot(dtree_out,type=5)
#Decision Tree- Demonstration purposes
dtree_out <- rpart(y ~., data= training_data,control=rpart.control(minsplit=5, minbucket=1, cp=0.001))
dtree_out
rpart.plot(dtree_out,type=5)
#Decision Tree- Demonstration purposes
dtree_out <- rpart(y ~., data= training_data,control=rpart.control(minsplit=5, minbucket=5, cp=0.001))
dtree_out
rpart.plot(dtree_out,type=5)
#Decision Tree- Demonstration purposes
dtree_out <- rpart(y ~., data= training_data,control=rpart.control(minsplit=3, minbucket=5))
dtree_out
rpart.plot(dtree_out,type=5)
#Decision Tree- Demonstration purposes
dtree_out <- rpart(y ~., data= training_data,control=rpart.control(minsplit=3, cp=0.001))
dtree_out
rpart.plot(dtree_out,type=5)
?rpart.control
#Decision Tree- Demonstration purposes
dtree_out <- rpart(y ~., data= training_data,control=rpart.control(minsplit=3, cp=0.005))
dtree_out
rpart.plot(dtree_out,type=5)
#Decision Tree- Demonstration purposes
dtree_out <- rpart(y ~., data= training_data,control=rpart.control(minsplit=3, cp=0.01))
dtree_out
rpart.plot(dtree_out,type=5)
#Decision Tree- Demonstration purposes
dtree_out <- rpart(y ~., data= training_data,control=rpart.control(minsplit=3, cp=0.001))
dtree_out
rpart.plot(dtree_out,type=5)
#Decision Tree- Demonstration purposes
dtree_out <- rpart(y ~., data= training_data,control=rpart.control(minsplit=3, cp=0.003))
dtree_out
rpart.plot(dtree_out,type=5)
#Decision Tree- Demonstration purposes
dtree_out <- rpart(y ~., data= training_data,control=rpart.control(cp=0.003))
dtree_out
rpart.plot(dtree_out,type=5)
library(caret)
packages.install('caret')
install.packages('caret')
library(caret)
install.packages('caret')
install.packages('lattice')
install.packages("lattice")
library(caret)
require(caret)
library(ggplot2)
library(caret)
install.packages('stringi')
library(caret)
knn_out <- train(y ~ ., data = training_data, method = "knn", trControl = ctrl, preProcess = c("center","scale"), tuneLength = 20)
#KNN with caret
ctrl <- trainControl(method="repeatedcv",repeats = 3)
knn_out <- train(y ~ ., data = training_data, method = "knn", trControl = ctrl, preProcess = c("center","scale"), tuneLength = 20)
knnFit
plot(knn_out)
#KNN with caret
ctrl <- trainControl(method="repeatedcv",repeats = 3)
knn_out <- train(y ~ ., data = training_data, method = "knn", trControl = ctrl, preProcess = c("center","scale"), tuneLength = 5)
selected_features <-
training_feature[!training_feature %in% c('euribor3m','nr.employed','previous',
'marital','loan','default')]
knn_out
training_data = bank_Data[trainIndex,selected_features]
testing_data = bank_Data[-trainIndex,selected_features]
knn_out <- train(y ~ ., data = training_data, method = "knn", trControl = ctrl, preProcess = c("center","scale"), tuneLength = 5)
#KNN with caret
ctrl <- trainControl(method="repeatedcv",repeats = 1,classProbs=TRUE,summaryFunction = twoClassSummary)
knn_out <- train(y ~ ., data = training_data, method = "knn", trControl = ctrl, preProcess = c("center","scale"), tuneLength = 1)
#KNN with caret
ctrl <- trainControl(method="repeatedcv",repeats = 1,summaryFunction = twoClassSummary)
knn_out <- train(y ~ ., data = training_data, method = "knn", trControl = ctrl, preProcess = c("center","scale"), tuneLength = 1)
knn_out
knn_out <- train(y ~ ., data = training_data, method = "knn", trControl = ctrl, preProcess = c("center","scale"), tuneGrid = knnGrid)
#KNN with caret
knnGrid <-  expand.grid(k = c(1:15))
ctrl <- trainControl(method="repeatedcv",repeats = 1,summaryFunction = twoClassSummary)
knn_out <- train(y ~ ., data = training_data, method = "knn", trControl = ctrl, preProcess = c("center","scale"), tuneGrid = knnGrid)
ctrl <- trainControl(method="repeatedcv",repeats = 1,summaryFunction = twoClassSummary)
knn_out <- train(y ~ ., data = training_data, method = "knn", trControl = ctrl, preProcess = c("center","scale"), tuneLength = 1)
knn_out <- train(y ~ ., data = training_data, method = "knn", trControl = ctrl,
preProcess = c("center","scale"), tuneLength = 1,metric = "ROC")
ctrl <- trainControl(method="repeatedcv",repeats = 1,classProbs = TRUE,summaryFunction = twoClassSummary)
knn_out <- train(y ~ ., data = training_data, method = "knn", trControl = ctrl,
preProcess = c("center","scale"), tuneLength = 1,metric = "ROC")
View(training_data)
#KNN with caret
training_data$y <- as.numeric(training_data$y)
knnGrid <-  expand.grid(k = c(1:15))
ctrl <- trainControl(method="repeatedcv",repeats = 1,classProbs = TRUE,summaryFunction = twoClassSummary)
knn_out <- train(y ~ ., data = training_data, method = "knn", trControl = ctrl,
preProcess = c("center","scale"), tuneLength = 1,metric = "ROC")
ctrl <- trainControl(method="cv",number = 3,classProbs = TRUE,summaryFunction = twoClassSummary)
knn_out <- train(y ~ ., data = training_data, method = "knn", trControl = ctrl,
preProcess = c("center","scale"), tuneLength = 1,metric = "ROC")
ctrl <- trainControl(method="cv",number = 3,classProbs = TRUE,summaryFunction = twoClassSummary)
#KNN with caret
training_data$y <- as.factor(training_data$y)
knnGrid <-  expand.grid(k = c(1:15))
ctrl <- trainControl(method="cv",number = 3,classProbs = TRUE,summaryFunction = twoClassSummary)
knn_out <- train(y ~ ., data = training_data, method = "knn", trControl = ctrl,
preProcess = c("center","scale"), tuneLength = 1,metric = "ROC")
?make.names
#KNN with caret
training_data$y <- ifelse(training_data$y == 1,'yes','no')
ctrl <- trainControl(method="cv",number = 3,classProbs = TRUE,summaryFunction = twoClassSummary)
knn_out <- train(y ~ ., data = training_data, method = "knn", trControl = ctrl,
preProcess = c("center","scale"), tuneLength = 1,metric = "ROC")
plot(knn_out)
#KNN with caret
training_data$y <- ifelse(training_data$y == 1,'yes','no')
knnGrid <-  expand.grid(k = c(1:15))
ctrl <- trainControl(method="cv",number = 3,classProbs = TRUE,summaryFunction = twoClassSummary)
knn_out <- train(y ~ ., data = training_data, method = "knn", trControl = ctrl,
preProcess = c("center","scale"), tuneLength = 1,metric = "ROC")
View(training_data)
training_data$y <- as.factor(training_data$y)
#knnGrid <-  expand.grid(k = c(1:15))
ctrl <- trainControl(method="cv",number = 3,classProbs = TRUE,summaryFunction = twoClassSummary)
#knnGrid <-  expand.grid(k = c(1:15))
ctrl <- trainControl(method="cv",number = 3,classProbs = TRUE,summaryFunction = twoClassSummary)
knn_out <- train(y ~ ., data = training_data, method = "knn", trControl = ctrl,
preProcess = c("center","scale"), tuneLength = 1,metric = "ROC")
print(unique(training_data$i))
for(i in names(training_data)){
print(unique(training_data$i))
}
View(training_data)
#knnGrid <-  expand.grid(k = c(1:15))
names(training_data)
for(i in names(training_data)){
print(training_data$i)
}
print(i)
print(i)
for(i in names(training_data)){
print(training_data$i)
}
for(i in names(training_data)){
training_data$i
}
for(i in names(training_data)){
print(unique(training_data[i]))
}
for(i in names(training_data)){
print(i)
print(nrows(unique(training_data[i])))
}
print(i)
print(nrow(unique(training_data[i])))
}
for(i in names(training_data)){
print(i)
print(nrow(unique(training_data[i])))
}
training_data
View(training_data)
training_data = bank_Data[trainIndex,selected_features]
testing_data = bank_Data[-trainIndex,selected_features]
ctrl <- trainControl(method="cv",number = 3,classProbs = TRUE,summaryFunction = twoClassSummary)
knn_out <- train(y ~ ., data = training_data, method = "knn", trControl = ctrl,
preProcess = c("center","scale"), tuneLength = 1,metric = "ROC")
#KNN with caret
training_data$y <- ifelse(training_data$y == 1,'yes','no')
ctrl <- trainControl(method="cv",number = 3,classProbs = TRUE,summaryFunction = twoClassSummary)
knn_out <- train(y ~ ., data = training_data, method = "knn", trControl = ctrl,
preProcess = c("center","scale"), tuneLength = 1,metric = "ROC")
knn_out
plot(knn_out)
knn_out <- train(y ~ ., data = training_data, method = "knn", trControl = ctrl,
preProcess = c("center","scale"), tuneLength = 10,metric = "ROC")
plot(knn_out)
set.seed(0)
ctrl <- trainControl(method="cv",number = 1,classProbs = TRUE,summaryFunction = twoClassSummary)
knn_out <- train(y ~ ., data = training_data, method = "knn", trControl = ctrl,
preProcess = c("center","scale"), tuneGrid = knnGrid,metric = "ROC")
#training_data$y <- as.factor(training_data$y)
knnGrid <-  expand.grid(k = c(1:15))
ctrl <- trainControl(method="cv",number = 1,classProbs = TRUE,summaryFunction = twoClassSummary)
knn_out <- train(y ~ ., data = training_data, method = "knn", trControl = ctrl,
preProcess = c("center","scale"), tuneGrid = knnGrid,metric = "ROC")
ctrl <- trainControl(method="cv",number = 3,classProbs = TRUE,summaryFunction = twoClassSummary)
knn_out <- train(y ~ ., data = training_data, method = "knn", trControl = ctrl,
preProcess = c("center","scale"), tuneGrid = knnGrid,metric = "ROC")
plot(knn_out)
c(1:15,2)
#training_data$y <- as.factor(training_data$y)
knnGrid <-  expand.grid(k = c(1,3,5,7,9,11,13,15,17,19))
ctrl <- trainControl(method="cv",number = 3,classProbs = TRUE,summaryFunction = twoClassSummary)
knn_out
#training_data$y <- as.factor(training_data$y)
knnGrid <-  expand.grid(k = c(1,3,5,7,9,11,13,15,17,19))
ctrl <- trainControl(method="cv",number = 3,classProbs = TRUE,summaryFunction = twoClassSummary)
knn_out <- train(y ~ ., data = training_data, method = "knn", trControl = ctrl,
preProcess = c("center","scale"), tuneGrid = knnGrid,metric = "ROC")
ctrl <- trainControl(method="cv",number = 3,classProbs = TRUE,summaryFunction = twoClassSummary)
knn_out <- train(y ~ ., data = training_data, method = "knn", trControl = ctrl,
preProcess = c("center","scale"), tuneGrid = knnGrid)
plot(knn_out)
knn_out
ctrl <- trainControl(method="cv",number = 10)#classProbs = TRUE,summaryFunction = twoClassSummary)
knn_13 <- train(y ~ ., data = training_data, method = "knn", trControl = ctrl,
preProcess = c("center","scale"), tuneGrid = expand.grid(k = c(13)))
knn_13
predict(knn_13,testing_data)
a< -predict(knn_13,testing_data)
knn_13_pred < -predict(knn_13,testing_data)
knn_13_pred < -predict(knn_13,testing_data)
knn_13_pred <- predict(knn_13,testing_data)
knn_13_test_acc <- mean(ifelse(knn_13_pred == testing_data$y,1,0))
testing_data$y <- ifelse(testing_data$y == 1,'yes','no')
knn_13_test_acc <- mean(ifelse(knn_13_pred == testing_data$y,1,0))
knn_13_test_acc
knn_13_pred
knn_13
knn_13['Accuracy']
View(knn_13)
knn_13["metric"]
knn_13["metric"].values
knn_13["metric"]
knn_13["result"]['accuracy']
knn_13["result"]['Accuracy']
knn_13["results"]['Accuracy']
knn_13["results"]
knn_13["results"]$Accuracy
knn_13["results"]
knn_13["results",'Accuracy']
knn_13["results"]
knn_13["results"][2]
knn_13["results"]
a<-knn_13["results"]
View(a)
knn_13["results"][1]
knn_13["results"][2]
1
knn_13["results"][1]
knn_13["results"]['Accuracy']
knn_13["results"][1][2]
knn_13["results"][1]
knn_13["results"][1]["Accuracy"]
knn_13["results"][1]$Accuracy
unlist(knn_13["results"][1])
a<-knn_13["results"]
View(a)
unlist(knn_13["results"])
unlist(knn_13["results"])[results.Accuracy ]
unlist(knn_13["results"])['results.Accuracy ']
unlist(knn_13["results"])['results.Accuracy']
a <- unlist(knn_13["results"])['results.Accuracy']
knn_13_test_acc
a <- as.numeric(unlist(knn_13["results"])['results.Accuracy'])
knn_13_test_acc
knn_13_train_acc <- as.numeric(unlist(knn_13["results"])['results.Accuracy'])
knn_13_train_acc
knn_13_test_acc
confusionMatrix(knn_13_pred,testing_data$y)
cm = as.matrix(table(Actual = testing_data$y, Predicted = knn_13_pred))
cm
cm
cm <- as.matrix(table(Actual = testing_data$y, Predicted = knn_13_pred))
cm
?confusionMatrix
confusionMatrix()
confusionMatrix(data = knn_13_pred, reference = testing_data$y)
testing_data$y
knn_13_pred
testing_data$y
testing_data$y
knn_13_pred
knn_13_pred <- as.factor(knn_13_pred)
knn_13_pred
testing_data$y
as.factor(testing_data$y)
testing_data$y <- as.factor(testing_data$y)
confusionMatrix(data = knn_13_pred, reference = testing_data$y)
testing_data$y <- as.factor(testing_data$y)
knn_13_pred <- as.factor(knn_13_pred)
confusionMatrix(data = knn_13_pred, reference = testing_data$y)
?randomForest
?randomForest
??randomForest
#In-sample Accuracy:
knn_13_train_acc
print(forest_out)
print(forest_out)
Summary(forest_out)
Summ(forest_out)
Sum(forest_out)
print(forest_out)
View(bank_Data)
varImpPlot(forest_out)
varImp(forest_out)
Plot(varImp(forest_out))
plot(forest_out, log="y")
plot(varImp(forest_out))
varImp(forest_out)
names(varImp(forest_out))
print(forest_out)
rf_pred
#out of sample acc
rf_pred <- forest_out %>% predict(testing_data, type = "response")
#out of sample acc
rf_pred <- forest_out %>% predict(testing_data, type = "response")
rf_pred
library(dplyr)
names(varImp(forest_out))
rf_feature_importance <- varImp(forest_out)
View(rf_feature_importance)
rf_feature_importance.index
rownames(rf_feature_importance.index)
rf_feature_importance.index
rownames(rf_feature_importance)
rf_feature_importance <- cbind(feature_name = rownames(rf_feature_importance), rf_feature_importance)
rownames(rf_feature_importance) <- 1:nrow(df)
rownames(rf_feature_importance) <- 1:nrow(rf_feature_importance)
#Decision Tree- Demonstration purposes
dtree_out <- rpart(y ~., data= training_data,method = 'class')
library(rpart)
#Decision Tree- Demonstration purposes
dtree_out <- rpart(y ~., data= training_data,method = 'class')
dtree_out
rpart.plot(dtree_out,type=5)
library(rpart.plot)
rpart.plot(dtree_out,type=5)
#Decision Tree- Demonstration purposes
dtree_out <- rpart(y ~., data= training_data,control=rpart.control(cp=0.003),method = 'class')
dtree_out
rpart.plot(dtree_out,type=5)
setwd("~/Documents/Codes/Data_Analytics/A7/Cervical_Cancer")
bank_Data <- read.csv(file='cervical_cancer.csv')
cacer_Data <- read.csv(file='sobar-72')
cacer_Data <- read.csv(file='sobar-72.csv')
View(cacer_Data)
cancer_Data <- read.csv(file='sobar-72.csv')
cancer_Data
View(cancer_Data)
cancer_Data
names(cancer_Data)
colnames <- names(cancer_Data)
knn_out
